{"version":3,"sources":["components/ImageFinder/Searchbar/Searchbar.js","components/ImageFinder/ImageGalleryItem/ImageGalleryItem.js","components/ImageFinder/ImageGallery/ImageGallery.js","components/ImageFinder/services/makeFetch.js","components/ImageFinder/services/infinityScroll.js","components/ImageFinder/App/App.js","index.js"],"names":["Searchbar","onSubmit","useState","targetValue","setTargetValue","className","e","preventDefault","type","autoComplete","autoFocus","value","placeholder","onChange","target","ImageGalleryItem","id","webformatURL","largeImageURL","data-attribute","src","alt","data-index","ImageGallery","images","map","image","index","key","color","height","width","timeout","makeFetch","perPage","crateFetchFind","targetSearch","page","console","log","fetch","this","then","res","json","hits","totalHits","options","rootMargin","ImageFinder","setImages","searchQuery","setSearchQuery","pageQuery","setPageQuery","total","setTotal","useEffect","fetchImages","infinityScroll","current","disconnect","useRef","IntersectionObserver","o","observer","setPage","forEach","entry","isIntersecting","unobserve","prev","length","prevState","imageListItem","document","querySelectorAll","observe","lazyLoadImg","query","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e15d71c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [targetValue, setTargetValue] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(targetValue);\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          value={targetValue}\r\n          placeholder=\"Search images and photos\"\r\n          onChange={({ target }) => setTargetValue(target.value)}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function ImageGalleryItem({ id, webformatURL, largeImageURL }) {\r\n  return (\r\n    <li data-attribute=\"SRL\" id={id} className=\"ImageGalleryItem\">\r\n      <img\r\n        src={webformatURL}\r\n        alt=\"\"\r\n        className=\"ImageGalleryItem-image\"\r\n        data-index={largeImageURL}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n","import ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\nimport { SRLWrapper } from \"simple-react-lightbox\";\nimport React from \"react\";\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nexport default function ImageGallery({ images }) {\n  return (\n    <SRLWrapper>\n      <ul className=\"ImageGallery\">\n        {images.map((image, index) => {\n          return (\n            <ImageGalleryItem\n              id={image.id}\n              webformatURL={image.webformatURL}\n              largeImageURL={image.largeImageURL}\n              key={index}\n            />\n          );\n        })}\n      </ul>\n      <Loader\n        type=\"Puff\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={3000} //3 secs\n      />\n    </SRLWrapper>\n  );\n}\n","const makeFetch = {\r\n  key: '18291614-3687f9869972091b65dd4882c',\r\n\r\n  perPage: 12,\r\n\r\n  crateFetchFind(targetSearch, page) {\r\n    console.log(page);\r\n\r\n    return fetch(`https://pixabay.com/api/?image_type=photo&orientation=horizontal&q=\r\n        ${targetSearch}&page=${page}&per_page=${this.perPage}&key=${this.key}`)\r\n      .then((res) => res.json())\r\n      .then(({ hits, totalHits }) => ({ hits, totalHits }));\r\n  },\r\n};\r\n\r\nexport default makeFetch;\r\n","const options = {\r\n  rootMargin: '50px',\r\n};\r\nconst onEntry = (entries, observer, setPage) => {\r\n  entries.forEach((entry) => {\r\n    if (entry.isIntersecting) {\r\n      console.log('зашли onEntry');\r\n      observer.unobserve(entry.target);\r\n      setPage((prev) => prev + 1);\r\n    }\r\n  });\r\n};\r\n\r\nconst lazyLoadImg = (infinityScroll) => {\r\n  console.log('зашли lazyLoadImg');\r\n  const imageListItem = document.querySelectorAll('.ImageGalleryItem');\r\n  infinityScroll.observe(imageListItem[imageListItem.length - 1]);\r\n};\r\n\r\nexport { onEntry, lazyLoadImg, options };\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Searchbar from \"../Searchbar/Searchbar\";\nimport ImageGallery from \"../ImageGallery/ImageGallery\";\nimport makeFetch from \"../services/makeFetch\";\nimport { onEntry, lazyLoadImg, options } from \"../services/infinityScroll\";\n\n// import IO from \"../../services/infinityScroll\";\n\nimport SimpleReactLightbox from \"simple-react-lightbox\";\n\nexport default function ImageFinder() {\n  const [images, setImages] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(null);\n  const [pageQuery, setPageQuery] = useState(1);\n  const [total, setTotal] = useState(null);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    fetchImages();\n    return () => {\n      console.log(\"дисконект\");\n      infinityScroll.current.disconnect();\n    };\n  }, [searchQuery, pageQuery]);\n\n  const infinityScroll = useRef(\n    new IntersectionObserver((e, o) => onEntry(e, o, setPageQuery), options)\n  );\n\n  const fetchImages = () => {\n    if (total === images.length) {\n      console.log(\"дисконект\");\n      infinityScroll.current.disconnect();\n      return;\n    }\n    makeFetch\n      .crateFetchFind(searchQuery, pageQuery)\n      .then(({ hits, totalHits }) => {\n        setImages((prevState) => [...prevState, ...hits]);\n        console.log(hits.length);\n        if (hits.length === 0) {\n          return;\n        }\n        setTotal(totalHits);\n        console.log(totalHits);\n        lazyLoadImg(infinityScroll.current);\n      });\n  };\n\n  const handlerSearchQuery = (query) => {\n    if (query === searchQuery) {\n      return;\n    }\n    setImages([]);\n    setPageQuery(1);\n    setSearchQuery(query);\n    infinityScroll.current.disconnect();\n  };\n\n  return (\n    <>\n      <SimpleReactLightbox>\n        <Searchbar onSubmit={handlerSearchQuery} />\n        {images.length > 0 && <ImageGallery images={images} />}\n      </SimpleReactLightbox>\n    </>\n  );\n}\n// export default function ImageFinder() {\n//   const [images, setImages] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState('');\n//   const [pageQuery, setPageQuery] = useState(1);\n//\n//   useEffect(() => {\n//     if (!setSearchQuery) {\n//       return;\n//     }\n//     fetchImages();\n//   }, [pageQuery]);\n//\n//   const options = {\n//     rootMargin: '50px',\n//   };\n//   const onEntry = (entries, observer) => {\n//     entries.forEach((entry) => {\n//       if (entry.isIntersecting) {\n//         console.log('зашли onEntry');\n//         observer.unobserve(entry.target);\n//         fetchImages();\n//       }\n//     });\n//   };\n//\n//   const infinityScroll = new IntersectionObserver(onEntry, options);\n//\n//   const lazyLoadImg = () => {\n//     console.log('зашли lazyLoadImg');\n//     const imageListItem = document.querySelectorAll('.ImageGalleryItem');\n//     infinityScroll.observe(imageListItem[imageListItem.length - 1]);\n//   };\n//\n//   const fetchImages = () => {\n//     makeFetch.crateFetchFind(searchQuery, pageQuery).then((data) => {\n//       setImages((prevState) => [...prevState, ...data]);\n//       setPageQuery((prevState) => prevState + 1);\n//\n//       lazyLoadImg();\n//     });\n//   };\n//\n//   const handlerSearchQuery = (query) => {\n//     setImages([]);\n//     setPageQuery(1);\n//     setSearchQuery(query);\n//   };\n//\n//   return (\n//       <>\n//         <SimpleReactLightbox>\n//           <Searchbar onSubmt={handlerSearchQuery} />\n//           {images.length > 0 && <ImageGallery images={images} />}\n//         </SimpleReactLightbox>\n//       </>\n//   );\n// }\n\n// export default function ImageFinder() {\n//   const [images, setImages] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(null);\n//   const [pageQuery, setPageQuery] = useState(1);\n//   const [total, setTotal] = useState(null);\n//\n//   useEffect(() => {\n//     if (!searchQuery) {\n//       return;\n//     }\n//\n//     fetchImages();\n//   }, [searchQuery]);\n//\n//   const infinityScroll = new IntersectionObserver(\n//       (e, o) => onEntry(e, o, fetchImages),\n//       options\n//   );\n//   function fetchImages() {\n//     if (total <= images.length - 1) {\n//       console.log('дисконект?');\n//       infinityScroll.disconnect();\n//       return;\n//     }\n//     makeFetch\n//         .crateFetchFind(searchQuery, pageQuery)\n//         .then(({ hits, totalHits }) => {\n//           setImages((prevState) => [...prevState, ...hits]);\n//           setPageQuery((prevState) => prevState + 1);\n//           setTotal(totalHits);\n//           lazyLoadImg(infinityScroll);\n//         });\n//   }\n//\n//   const handlerSearchQuery = (query) => {\n//     setImages([]);\n//     setPageQuery(1);\n//     setSearchQuery(query);\n//     infinityScroll.disconnect();\n//   };\n//\n//   return (\n//       <>\n//         <SimpleReactLightbox>\n//           <Searchbar onSubmt={handlerSearchQuery} />\n//           {images.length > 0 && <ImageGallery images={images} />}\n//         </SimpleReactLightbox>\n//       </>\n//   );\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AppHooks from \"./components/ImageFinder/App/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <AppHooks />\n    </>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}